{
  "reference": {
    "path": "kotlindoc",
    "baseUrl": "https://jasonwyatt.github.io/KWasm",
    "fileName": "kwasm/validation/module/modulevalidator",
    "extension": "html",
    "usePrettyUrl": true,
    "link": "https://jasonwyatt.github.io/KWasm/kotlindoc/kwasm/validation/module/modulevalidator"
  },
  "data": {},
  "description": "",
  "title": "ModuleValidator",
  "content": "<p>CommentComponent(kind=text, text=Validator of , value=) CommentComponent(kind=typeName, text=WasmModule, value=kwasm.ast.module.WasmModule) CommentComponent(kind=text, text=s.<p>From <a href=\"https://webassembly.github.io/spec/core/valid/modules.html#valid-module\">the docs<\/a>:<\/p><p>Modules are classified by their mapping from the external types of their imports to those of\ntheir exports.<\/p><p>A module is entirely closed, that is, its components can only refer to definitions that appear\nin the module itself. Consequently, no initial context is required. Instead, the context <code>C<\/code>\nfor validation of the module\u2019s content is constructed from the definitions in the module.<\/p><p><i>KWasm Note:<\/i> The validation context will be passed to the , value=) CommentComponent(kind=typeName, text=ModuleValidator, value=kwasm.validation.module.ModuleValidator) CommentComponent(kind=text, text=<\/p><ul><li>Let <code>module<\/code> be the module to validate.<\/li><li><p>Let <code>C<\/code> be a context where:<\/p>  <ul><li><code>C.types<\/code> is <code>module.types<\/code>,<\/li>  <li><code>C.funcs<\/code> is <code>funcs(it*)<\/code> concatenated with <code>ft*<\/code>, with the import\u2019s external types <code>it*<\/code>\nand the internal function types <code>ft*<\/code> as determined below,<\/li>  <li><code>C.tables<\/code> is <code>tables(it*)<\/code> concatenated with <code>tt*<\/code>, with the import\u2019s external types <code>it*<\/code>\nand the internal table types <code>tt*<\/code> as determined below,<\/li>  <li><code>C.mems<\/code> is <code>mems(it*)<\/code> concatenated with <code>mt*<\/code>, with the import\u2019s external types <code>it*<\/code> and\nthe internal memory types <code>mt*<\/code> as determined below,<\/li>  <li><code>C.globals<\/code> is <code>globals(it*)<\/code> concatenated with <code>gt*<\/code>, with the import\u2019s external types\n<code>it*<\/code> and the internal global types <code>gt*<\/code> as determined below,<\/li>  <li><code>C.locals<\/code> is empty,<\/li>  <li><code>C.labels<\/code> is empty,<\/li>  <li><code>C.return<\/code> is empty.<\/li><\/ul><\/li><li>Let <code>C\u2032<\/code> be the context where <code>C\u2032.globals<\/code> is the sequence <code>globals(it*)<\/code> and all other fields\nare empty.<\/li><li>Under the context <code>C<\/code>:<\/li><li>For each <code>functype_i<\/code> in <code>module.types<\/code>, the function type <code>functype_i<\/code> must be valid.<\/li><li>For each <code>func_i<\/code> in <code>module.funcs<\/code>, the definition <code>func_i<\/code> must be valid with a function\ntype <code>ft_i<\/code>.<\/li><li>For each <code>table_i<\/code> in <code>module.tables<\/code>, the definition <code>table_i<\/code> must be valid with a table\ntype <code>tt_i<\/code>.<\/li><li>For each <code>mem_i<\/code> in <code>module.mems<\/code>, the definition <code>mem_i<\/code> must be valid with a memory type\n<code>mt_i<\/code>.<\/li><li>For each <code>global_i<\/code> in <code>module.globals:<\/code> Under the context <code>C\u2032<\/code>, the definition <code>global_i<\/code>\nmust be valid with a global type <code>gt_i<\/code>.<\/li><li>For each <code>elem_i<\/code> in <code>module.elem<\/code>, the segment <code>elem_i<\/code> must be valid.<\/li><li>For each <code>data_i<\/code> in <code>module.data<\/code>, the segment <code>data_i<\/code> must be valid.<\/li><li>If <code>module.start<\/code> is non-empty, then <code>module.start<\/code> must be valid.<\/li><li>For each <code>import_i<\/code> in <code>module.imports<\/code>, the segment <code>import_i<\/code> must be valid with an\nexternal type <code>it_i<\/code>.<\/li><li>For each <code>export_i<\/code> in <code>module.exports<\/code>, the segment <code>export_i<\/code> must be valid with external\ntype <code>et_i<\/code>.<\/li><li>The length of <code>C.tables<\/code> must not be larger than <code>1<\/code>.<\/li><li>The length of <code>C.mems<\/code> must not be larger than <code>1<\/code>.<\/li><li>All export names <code>export_i.name<\/code> must be different.<\/li><li>Let <code>ft*<\/code> be the concatenation of the internal function types <code>ft_i<\/code>, in index order.<\/li><li>Let <code>tt*<\/code> be the concatenation of the internal table types <code>tt_i<\/code>, in index order.<\/li><li>Let <code>mt*<\/code> be the concatenation of the internal memory types <code>mt_i<\/code>, in index order.<\/li><li>Let <code>gt*<\/code> be the concatenation of the internal global types <code>gt_i<\/code>, in index order.<\/li><li>Let <code>it*<\/code> be the concatenation of external types <code>it_i<\/code> of the imports, in index order.<\/li><li>Let <code>et*<\/code> be the concatenation of external types <code>et_i<\/code> of the exports, in index order.<\/li><li>Then the module is valid with external types <code>it* =&gt; et*<\/code>.<\/li><\/ul>, value=null)<\/p>\n"
}